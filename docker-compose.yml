version: "3"

services:

  server:
    build:
      context: server
      dockerfile: Dockerfile
    container_name: canvas-server
    command: "npm start"
    ports:
      - "3000:3000"
    expose:
      - "3000"
    volumes:
      - ./server:/opt/app
      - ./server/package.json:/opt/app/package.json
      - ./server/package-lock.json:/opt/app/package-lock.json
      - notused-client:/opt/app/node_modules

  client:
    build:
      context: client
      dockerfile: Dockerfile
    container_name: canvas-client
    command: "npm start"
    ports:
      - "80:80"
    expose:
      - "80"
    volumes:
      - ./client:/opt/app:delegated
      # bind-mounting these two files in will let you add packages during development without rebuilding
      # for example, to add bower to your app while developing, just install it inside the container
      # and then nodemon will restart. Your changes will last until you "docker-compose down" and will
      # be saved on host for next build
      # docker-compose exec node npm install --save bower
      - ./client/package.json:/opt/app/package.json
      - ./client/package-lock.json:/opt/app/package-lock.json
      # this is a workaround to prevent host node_modules from accidently getting mounted in container
      # in case you want to use node/npm both outside container for test/lint etc. and also inside container
      # this will overwrite the default node_modules dir in container so it won't conflict with our
      # /opt/node_modules location. Thanks to PR from @brnluiz
      - notused-server:/opt/app/node_modules

volumes:
  notused-client:
  notused-server: